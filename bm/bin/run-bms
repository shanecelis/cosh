#!/usr/bin/perl

use warnings;
use strict;

use JSON::XS qw(encode_json);
my $count = 10;

my ($perl_ver) =
    grep { /v5\./ }
        `perl -v`;
chomp $perl_ver;
$perl_ver =~ s/^.*\(v(5\..*?)\).*$/$1/;
my ($cosh_commit) = `git log --pretty=format:"%H" | head -n 1`;
chomp $cosh_commit;
my ($cosh_hash) = `find src -type f -exec md5sum {} \\; | sort -k 2 | md5sum`;
chomp $cosh_hash;
$cosh_hash =~ s/ .*//;

sub run_cmd
{
    my ($cmd, $program, $lang, $ext) = @_;

    my ($fig) = `./bm/bin/$cmd $lang $program.$ext`;
    chomp $fig;
    return $fig;
}

if (not -e 'bm-file.txt') {
    my $res = system("bm/bin/generate-bm-file > bm-file.txt");
    if ($res != 0) {
        die "Unable to generate benchmark file";
    }
}

my @programs =
    map { s/\.pl//; $_ }
    map { chomp; $_ }
        `ls bm/programs/*.pl`;

my @perl_extras = qw(perl pl);
my @cosh_extras = qw(./target/release/cosh ch);
my $time = time();
my %bm_details = (
    other => { time => $time },
    #perl  => { version => $perl_ver },
    cosh  => { commit  => $cosh_commit,
               hash    => $cosh_hash }
);
for my $program (@programs) {
#    my %perl_details = (
#        avg_time => run_cmd("avg-time $count", $program, @perl_extras),
#        avg_inst => run_cmd("avg-perf instructions $count", $program, @perl_extras),
#        avg_mem  => run_cmd("avg-perf syscalls:sys_enter_mmap,syscalls:sys_enter_brk 1",
#                            $program, @perl_extras),
#        max_rss  => run_cmd("max-rss", $program, @perl_extras),
#    );
    my %cosh_details = (
        avg_time => run_cmd("avg-time $count", $program, @cosh_extras),
        avg_inst => run_cmd("avg-perf instructions $count", $program, @cosh_extras),
        avg_mem  => run_cmd("avg-perf syscalls:sys_enter_mmap,syscalls:sys_enter_brk 1",
                            $program, @cosh_extras),
        max_rss  => run_cmd("max-rss", $program, @cosh_extras),
    );
#    my %diff = (
#        map { my $pv = $perl_details{$_};
#              my $cv = $cosh_details{$_};
#              my $diff = $cv / $pv;
#              $_ => sprintf("%.3f", $diff) }
#            qw(avg_time avg_inst avg_mem max_rss)
#    );

    my $pname = $program;
    $pname =~ s/.*\///;
    $bm_details{'programs'}->{$pname} = {
#        perl => \%perl_details,
        cosh => \%cosh_details,
#        diff => \%diff,
    };
}

unlink "perf.data";
unlink "perf.data.old";

print encode_json(\%bm_details);

1;
